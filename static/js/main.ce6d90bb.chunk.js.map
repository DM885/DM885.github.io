{"version":3,"sources":["components/UI/Spinner.js","helpers.js","components/LoginPage.js","components/UserListPage.js","components/SolversPage.js","components/SignUpPage.js","components/HistoryPage.js","components/NewRunPage.js","components/EditFilePage.js","components/LogPage.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","props","visible","className","role","IP","getInputValues","elements","reduce","obj","curr","name","value","API","method","endpoint","headers","body","fetch","accessToken","undefined","JSON","stringify","then","d","status","error","json","catch","e","console","rawCall","Authorization","authToken","data","refreshToken","getAccessToken","call","solvers","statuses","LoginPage","state","loading","a","preventDefault","this","setState","values","target","history","push","setRefreshToken","userRank","alert","onSubmit","checkLogin","type","to","React","Component","withRouter","UserListPage","user","getData","log","resp","str","test","map","id","email","rank","onClick","enteredLimit","prompt","username","recourseLimit","isInt","SolversPage","editing","window","confirm","isEditing","isNew","editingData","save","htmlFor","required","defaultValue","docker_image","scope","key","delete","SignUpPage","userInput","length","password","passwordRepeat","signUp","HistoryPage","models","_refreshInt","setInterval","clearInterval","everything","results","Date","timestamp","toLocaleString","model","fileId","filename","NewRunPage","newSolver","solver","flagA","flagF","flagP","flagM","cpuLimit","memoryLimit","timeLimit","currentModel","currentDataset","solverData","i","dataset","onChange","Number","style","width","updateSolver","checked","defaultChecked","min","addSolver","extensions","names","EditModelPage","content","match","params","inputData","IS_EDITING","route","filetype","file","files","fs","FileReader","onload","result","readAsText","typeName","for","disabled","placeholder","parseFile","accept","logs","userId","sessionId","requestId","logPath","App","useState","setRefreshTokenState","setUserRank","token","useEffect","t","localStorage","getItem","r","AdminRoute","children","removeItem","path","exact","EditFilePage","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce6d90bb.chunk.js","sourcesContent":["export default function Spinner(props)\n{\n    return props.visible && (<div className=\"position-absolute vh-100 vw-100 d-flex justify-content-center align-items-center bg-secondary opacity-75\">\n        <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>);\n}","const IP = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ? \"http://localhost:8080\" : \"https://dm885.smessie.com\"; // Gateway IP\r\n\r\nexport function getInputValues(elements)\r\n{\r\n    return [...elements].reduce((obj, curr) => {\r\n        if(curr.name)\r\n        {\r\n            obj[curr.name] = curr.value;\r\n        }\r\n        return obj;\r\n    }, {});\r\n}\r\n\r\nexport class API {\r\n    static authToken = false;\r\n    static refreshToken = false;\r\n    static accessToken = false;\r\n\r\n    static rawCall(method, endpoint, headers = {}, body)\r\n    {\r\n       return fetch(`${IP}/${endpoint}`, {\r\n            method,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                ...headers,\r\n                \"Authorization\": API.accessToken ? `Bearer ${API.accessToken}` : undefined,\r\n            },\r\n            body: body ? JSON.stringify(body) : undefined,\r\n        })\r\n        .then(d => d.status === 404 ? {error: true} : d.json()) // Dont try to refresh accessToken on 404\r\n        .catch(e => {\r\n            console.error(`${IP}/${endpoint}`, {\r\n                method,\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    ...headers,\r\n                    \"Authorization\": API.accessToken ? `Bearer ${API.accessToken}` : undefined,\r\n                },\r\n                body: body ? JSON.stringify(body) : undefined,\r\n            }, e);\r\n            return false;\r\n        });\r\n    }\r\n\r\n    static async call(method = \"GET\", endpoint, body, headers = {})\r\n    {\r\n        const data = await API.rawCall(method, endpoint, {\r\n            Authorization: API.authToken ?? undefined,\r\n            ...headers,\r\n        }, body);\r\n\r\n        if(!data && API.refreshToken) // Auth token expired, refresh it and retry\r\n        {\r\n            await API.getAccessToken();\r\n            return (await API.call(method, endpoint, body, headers));\r\n        }else{\r\n            return data;\r\n        }\r\n    }\r\n\r\n    static async getAccessToken()\r\n    {\r\n        const data = await API.rawCall(\"POST\", \"auth/accessToken\", {}, {\r\n            refreshToken: API.refreshToken,\r\n        });\r\n        if(data && !data.error)\r\n        {\r\n            API.accessToken = data.accessToken;\r\n        }else{\r\n            API.refreshToken = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport const solvers = [\"Gecode\", \"OR-tool\"];\r\nexport const statuses = [\"In queue\", \"Computing\", \"Completed\"];","import React from \"react\";\r\nimport {withRouter} from \"react-router\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport Spinner from \"./UI/Spinner\";\r\n\r\nimport {API, getInputValues} from \"../helpers\";\r\n\r\nclass LoginPage extends React.Component {\r\n    state = {\r\n        loading: false,\r\n    };\r\n\r\n    /**\r\n     * Checks the credentials, and signs the user in if correct.\r\n     * @param SubmitEvent e \r\n     */\r\n    async checkLogin(e)\r\n    {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true,\r\n        });\r\n        const values = getInputValues(e.target.elements);\r\n\r\n        const data = await API.call(\"POST\", \"auth/login\", values);\r\n        if((data && !data.error))\r\n        {\r\n            this.props.history.push(\"/\");\r\n            this.props.setRefreshToken(data.refreshToken, data.userRank);\r\n        }else{\r\n            alert(\"Wrong username, or password.\");\r\n            this.setState({\r\n                loading: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        // this.props.setRefreshToken(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjEyLCJpYXQiOjE2Mzk5MDUyNjMsImlzcyI6IiJ9.GB35BgJMWVxmJ0pbzjnto89JGrqtbVjbE0oDwERt_Mc\", 0);\r\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\r\n            <Spinner visible={this.state.loading} />\r\n            <form onSubmit={e => this.checkLogin(e)} className=\"d-flex flex-column align-self-center w-25\">\r\n                <label>Username:</label>\r\n                <input name=\"username\" className=\"form-control\" type=\"input\"/>\r\n                <label>Password:</label>\r\n                <input name=\"password\" className=\"form-control\" type=\"password\"/>\r\n                <button className=\"btn btn-primary mt-3\">\r\n                    Sign in\r\n                </button>\r\n                <div className=\"d-flex justify-content-center pt-2\">\r\n                    <Link to=\"/signup\">New user</Link>\r\n                </div>\r\n            </form>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default withRouter(LoginPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {API} from \"../helpers\";\n\n\n\nclass UserListPage extends React.Component {\n    \n    state = {\n        user: []\n       \n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        console.log(\"GEETTIIING DATE\")\n        API.call(\"get\", \"users\").then(resp => {\n            console.log(\"resp\", resp);\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    user: resp.data,\n                });\n            }\n        });\n    }\n    isInt(str) {\n        return /^\\+?(0|[1-9]\\d*)$/.test(str);\n    }\n    render()\n    {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1>User List</h1>\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Username</th>\n                                    <th>Rank</th>\n                                    <th>Delete</th>\n                                    <th>Stop Que</th>\n                                    <th>Recourse Limit</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.user.map(user => {\n                                        return (\n                                            <tr key={user.id}>\n                                                <td>{user.id}</td>\n                                                <td>{user.email}</td>\n                                                <td>{user.rank}</td>\n                                                <td>\n                                                    <button className=\"btn btn-danger\" onClick={() => {\n                                                        API.call(\"DELETE\", `/users/${user.id}`).then(resp => {\n                                                            if(resp && !resp.error)\n                                                            {\n                                                                this.getData();\n                                                            }\n                                                        });\n                                                    }}>Delete</button>\n                                                </td>\n                                                <td>\n                                                    <button className=\"btn btn-danger\" onClick={() => {\n                                                        API.call(\"PUT\", `/users/${user.id}/stop`).then(resp => {\n                                                            if(resp && !resp.error)\n                                                            {\n                                                                this.getData();\n                                                            }\n                                                        });\n                                                    }}>Stop Que</button>\n                                                </td>\n                                                <td> \n                                                    <button className=\"btn btn-secondary\" onClick={() => {\n                                                       const enteredLimit = prompt('Set recourse limit for user: ' + user.username, user.recourseLimit);\n                                                       if (this.isInt(enteredLimit) === true){\n                                                         API.call(\"PUT\", `/users/${user.id}/recourseLimit/${enteredLimit}`).then(resp => {\n                                                                if(resp && !resp.error)\n                                                                {\n                                                                    this.getData();\n                                                                    <div class=\"alert alert-success\" role=\"alert\">\n                                                                        <h4 class=\"alert-heading\">Updated!</h4>\n                                                                        <p>The recourse limit for user {user.username} has been updated to {enteredLimit}.</p>\n                                                                        </div>\n                                                                }\n                                                            \n                                                    })\n                                                    \n                                                    \n                                                    }else{\n                                                        <div class=\"alert alert-alert\" role=\"alert\">\n                                                        <h4 class=\"alert-heading\">Error!</h4>\n                                                        <p>The recourse limit for user {user.username} has not been updated. Please enter a valid number.</p>\n                                                        \n                                                        </div>\n                                                    }\n                                                    }}>\n                                                    {user.recourseLimit}</button></td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    \n        \n\n        \n    }\n\n}export default withRouter(UserListPage);","import React from \"react\";\r\n\r\nimport {API, getInputValues} from \"../helpers.js\";\r\n\r\nexport default class SolversPage extends React.Component {\r\n    state = {\r\n        solvers: [],\r\n        editing: false,\r\n    };\r\n\r\n    componentDidMount()\r\n    {\r\n        this.getData();\r\n    }\r\n\r\n    async getData()\r\n    {\r\n        const data = await API.call(\"GET\", \"solvers\");\r\n        if(data && !data.error)\r\n        {\r\n            this.setState({\r\n                solvers: data.data,\r\n            });\r\n        }\r\n    }\r\n\r\n    async delete(id)\r\n    {\r\n        const check = window.confirm(\"Are you sure you want to delete it?\");\r\n        if(check)\r\n        {\r\n            await API.call(\"DELETE\", \"solvers/\" + id);\r\n            await this.getData();\r\n        }\r\n    }\r\n\r\n    async save(e)\r\n    {\r\n        e.preventDefault();\r\n        const data = getInputValues(e.target.elements);\r\n        const isEditing = typeof this.state.editing === \"number\";\r\n        const resp = await (isEditing ? API.call(\"PUT\", \"solvers/\" + this.state.editing, data) : API.call(\"POST\", \"solvers\", data));\r\n        if(resp && !resp.error)\r\n        {\r\n            this.setState({\r\n                editing: false,\r\n            });\r\n            this.getData();\r\n        }else{\r\n            alert(\"A unkown error happened, try again\");\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const isEditing = typeof this.state.editing === \"number\";\r\n        const isNew = this.state.editing === \"new\";\r\n        const editingData = isEditing ? this.state.solvers[this.state.editing] : {};\r\n\r\n        return <div className=\"container-fluid\">\r\n            {\r\n                (isEditing || isNew) && <div className=\"pb-2 mb-2 border-bottom\">\r\n                    <h1>{isEditing ? \"Editing solver\" : \"New solver\"}</h1>\r\n                    <form onSubmit={e => this.save(e)}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-2\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                            </div>\r\n                            <div className=\"col-sm-10 pb-1\">\r\n                                <input className=\"form-control\" name=\"name\" required={true} defaultValue={editingData?.name} />\r\n                            </div>\r\n                            <div className=\"col-sm-2\">\r\n                                <label htmlFor=\"name\">Image</label>\r\n                            </div>\r\n                            <div className=\"col-sm-10\">\r\n                                <input className=\"form-control\" name=\"docker_image\" required={true} defaultValue={editingData?.docker_image} />\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn btn-light\">Save</button>\r\n                    </form>\r\n                </div>\r\n            }\r\n            <h1>Solvers</h1>\r\n            <button onClick={() => this.setState({editing: \"new\"})} className=\"btn btn-primary\">New solver</button>\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Image</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        this.state.solvers.map((data, key) => <tr key={data.id}>\r\n                            <th scope=\"row\">{data.id}</th>\r\n                            <td>{data.name}</td>\r\n                            <td>{data.docker_image}</td>\r\n                            <td>\r\n                                <button onClick={() => this.setState({editing: key})} className=\"btn m-1 mt-0 mb-0 btn-secondary\">Edit</button>\r\n                                <button onClick={() => this.delete(data.id)} className=\"btn btn-danger\">Delete</button>\r\n                            </td>\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n                </table>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nimport Spinner from \"./UI/Spinner\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass SignUpPage extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    /**\n     * Checks the userdata, and signs the user up if correct.\n     * @param SubmitEvent e \n     */\n    async signUp(e)\n    {\n        e.preventDefault();\n        const userInput = getInputValues(e.target.elements);\n        \n        if(userInput.username.length === 0)\n        {\n            alert(\"A username is required\");\n        }else if(userInput.password.length === 0)\n        {\n            alert(\"A password is required\");\n        }else if(userInput.password !== userInput.passwordRepeat){\n            alert(\"The two given password are not the same\");\n        }else{\n            this.setState({\n                loading: true,\n            });\n            const data = await API.call(\"POST\", \"auth/register\", userInput);\n            this.setState({\n                loading: false,\n            });\n            if((data && !data.error))\n            {\n                alert(\"Your user has been created!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"A unkown error orcurred, try again\");\n            }\n        }\n    }\n\n    render(){\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\n            <Spinner visible={this.state.loading} />\n            <form onSubmit={e => this.signUp(e)} className=\"d-flex flex-column align-self-center w-25\">\n                <label>Username:</label>\n                <input name=\"username\" required className=\"form-control\" type=\"input\"/>\n                <label>Password:</label>\n                <input name=\"password\" required className=\"form-control\" type=\"password\"/>\n                <label>Repeat password:</label>\n                <input name=\"passwordRepeat\" required className=\"form-control\" type=\"password\"/>\n                <button className=\"btn btn-primary mt-3\">\n                    Create account\n                </button>\n                <div className=\"d-flex justify-content-center pt-2\">\n                    <Link to=\"/\">Go back</Link>\n                </div>\n            </form>\n        </div>);\n    }\n}\n\nexport default withRouter(SignUpPage);","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {API, statuses} from \"../helpers\";\r\n\r\nexport default class HistoryPage extends React.Component {\r\n    state = {\r\n        history: [],\r\n        models: [],\r\n        data: []\r\n    };\r\n    _refreshInt;\r\n\r\n    componentDidMount()\r\n    {\r\n        this.getData();\r\n        this._refreshInt = setInterval(() => this.getData(0), 3500);\r\n    }\r\n\r\n    componentWillUnmount()\r\n    {\r\n        clearInterval(this._refreshInt);\r\n    }\r\n\r\n    /**\r\n     * Makes a DELETE call for the given type and id.\r\n     * @param {*} type \r\n     * @param {*} id \r\n     */\r\n    async delete(id)\r\n    {\r\n        const check = window.confirm(\"Are you sure you want to delete it?\");\r\n        if(check)\r\n        {\r\n            const data = await API.call(\"DELETE\", `files/${id}`);\r\n            if(data)\r\n            {\r\n                this.getData();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the data and model data.\r\n     */\r\n    getData(everything = 1)\r\n    {\r\n        API.call(\"GET\", \"jobs\").then(resp => {\r\n            if(resp && !resp.error)\r\n            {\r\n                this.setState({\r\n                    history: resp.data,\r\n                });\r\n            }\r\n        });\r\n        \r\n        if(everything === 1)\r\n        {\r\n            API.call(\"GET\", \"files/all/0\").then(resp => {\r\n                if(resp && !resp.error)\r\n                {\r\n                    this.setState({\r\n                        models: resp.results,\r\n                    });\r\n                }\r\n            });\r\n            \r\n            API.call(\"GET\", \"files/all/1\").then(resp => {\r\n                if(resp && !resp.error)\r\n                {\r\n                    this.setState({\r\n                        data: resp.results,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    render()\r\n    {\r\n        return (\r\n            //Move table to only  tage 2/3 of the left part of the page\r\n            <div className=\"container pt-4\">\r\n                <div className=\"row align-items-start\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"card card-body\">\r\n                            <h3 className=\"text-center\">History</h3>\r\n                            <table className=\"table table-hover\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>Time</th>\r\n                                        <th>Status</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.history.map(history => (\r\n                                        <tr key={history.id}>\r\n                                            <td>{history.id}</td>\r\n                                            <td>{new Date(history.timestamp).toLocaleString()}</td>\r\n                                            <td>\r\n                                                {\r\n                                                    history.status === 1 ? <div className=\"spinner-border text-primary\" role=\"status\"/> : statuses[history.status]\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row pt-1\">\r\n                    <Link to=\"/newRun\" className=\"d-grid gap-2\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" >\r\n                            Start new run!\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n\r\n                <div className=\"row pt-4\">\r\n                    <div className=\"col-md-6\">\r\n                    <div className=\"card card-body\">\r\n                        <h3 className=\"text-center\">Models</h3>\r\n                        <table className=\"table table-hover\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Name</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.models.map(model => (\r\n                                    <tr key={model.id}>\r\n                                        <td>{model.fileId}</td>\r\n                                        <td>{model.filename}</td>\r\n                                        <td>\r\n                                            <Link to={`/model/${model.id}`} className=\"text-dark\">\r\n                                                <i className=\"bi bi-pencil-square\"/>\r\n                                            </Link>\r\n                                        </td>\r\n                                        <td>\r\n                                            <i onClick={() => this.delete(model.fileId)} role=\"button\" className=\"bi bi-trash\"></i>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <Link to=\"/model/new\">\r\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\r\n                            Create new model!\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n                    \r\n                <div className=\"col-md-6\">\r\n                    <div className=\"card card-body\">\r\n                        <h3 className=\"text-center\">Data</h3>\r\n                        <table className=\"table table-hover\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Name</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.data.map(data => (\r\n                                    <tr key={data.id}>\r\n                                        <td>{data.fileId}</td>\r\n                                        <td>{data.filename}</td>\r\n                                        <td>\r\n                                            <Link to={`/data/${data.fileId}`} className=\"text-dark\">\r\n                                                <i className=\"bi bi-pencil-square\"/>\r\n                                            </Link>\r\n                                        </td>\r\n                                        <td>\r\n                                            <i onClick={() => this.delete(data.fileId)} role=\"button\" className=\"bi bi-trash\"/>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <Link to=\"/data/new\">\r\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\r\n                            Create new dataset!\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n                \r\n           \r\n    \r\n    \r\n}\r\n\r\n\r\n","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, solvers} from \"../helpers\";\n\n// Create a new component that will produce some HTML where a user can choose multiple Solver from a dropdown and also give a text input for some flags to set.\nclass NewRunPage extends React.Component {\n    newSolver = {\n        solver: solvers[0],\n        flagA: false,\n        flagF: false,\n        flagP: 1,\n        flagM: 100,\n        cpuLimit: 0,\n        memoryLimit: 0,\n        timeLimit: 0,\n    };\n\n    state = {\n        models: [],\n        data: [],\n\n        currentModel: 0,\n        currentDataset: 0,\n        solverData: [],\n        solvers: [],\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"files/all/0\").then(resp => {\n            if(resp && !resp.error)\n            {\n                console.log(\"Got resp\", resp);\n                this.setState({\n                    models: resp.results,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"files/all/1\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    data: resp.results,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"solvers\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    solverData: resp.data,\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates the given attribute on the given solver.\n     * @param String key \n     * @param String value \n     * @param Number i \n     */\n    updateSolver(key, value, i)\n    {\n        const solvers = [...this.state.solvers];\n        const data = {...solvers[i]};\n        data[key] = value;\n        solvers[i] = data;\n        this.setState({\n            solvers,\n        });\n    }\n\n    /**\n     * Adds a blank solver to the state.\n     */\n    addSolver()\n    {\n        this.setState({\n            solvers: [\n                ...this.state.solvers,\n                {\n                    ...this.newSolver\n                }\n            ]\n        });\n    }\n\n    /**\n     * Validates, and saves the form data.\n     */\n    async save()\n    {\n        const data = {\n            model: this.state.currentModel,\n            dataset: this.state.currentDataset,\n            solvers: [...this.state.solvers],\n        };\n        if(data.model === 0)\n        {\n            alert(\"A valid model needs to be choosen\");\n        }else if(data.solvers.length === 0)\n        {\n            alert(\"You need atleast one solver\");\n        }else{\n            const resp = await API.call(\"POST\", \"jobs\", data);\n            if(resp && !resp.error)\n            {\n                alert(\"Your run has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again.\");\n            }\n        }\n    }\n\n    render()\n    {\n        return (<div className=\"container pt-4\">\n                    <h1>New run</h1>\n                    <label>Model:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentModel: Number(e.target.value)})} defaultValue={this.state.currentModel} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a model</option>\n                            {this.state.models.map(model => (\n                                <option value={model.fileId} key={model.fileId}>{model.filename}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <label>Dataset:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentDataset: Number(e.target.value)})} defaultValue={this.state.currentDataset} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a dataset</option>\n                            {this.state.data.map(data => (\n                                <option value={data.fileId} key={data.fileId}>{data.filename}</option>\n                            ))}\n                        </select>\n                    </div>\n\n\n                    {/* <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\"></input>\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\"> Parallel run</label>\n                    </div> */}\n\n                    {/* <div className=\"col-sm-4\">\n                        <label htmlFor=\"timeLimit\">Time limit in seconds</label>\n                    </div>\n                    <div className=\"col-sm-8\">\n                        <input type=\"number\" id=\"timeLim\" name=\"timeLim\"/>\n                    </div> */}\n\n                    {\n                        this.state.solvers.map((solver, key) => <div className=\"pt-4 pb-4 border-top\" key={key}>\n                        <label htmlFor=\"solver\">\n                            <h5>Solver #{key + 1}</h5>\n                        </label>\n                        <select onChange={(e) => this.updateSolver(\"solver\", e.target.value, key)} className=\"form-select form-select-lg mb-2\" aria-label=\".form-select-lg example\" id=\"solver\">\n                            {\n                                this.state.solverData.map((solver, i) => <option value={solver.id} key={i}>{solver.name}</option>)\n                            }\n                        </select>\n                        <h6>Flags</h6>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagA\">All solutions?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" id=\"flagA\" onChange={(e) => this.updateSolver(\"flagA\", e.target.checked, key)} defaultChecked={solver.flagA} name=\"flagA\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagF\">Free search?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" onChange={(e) => this.updateSolver(\"flagF\", e.target.checked, key)} id=\"flagF\" defaultChecked={solver.flagF} name=\"flagF\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"cpuLimit\">vCPU's</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"number\" onChange={(e) => this.updateSolver(\"cpuLimit\", Number(e.target.value), key)} min=\"0\" defaultValue={solver.cpuLimit} id=\"cpuLimit\" name=\"cpuLimit\"/>\n                            </div>\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"memoryLimit\">Memory [mb] (0 = not set)</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"number\" onChange={(e) => this.updateSolver(\"memoryLimit\", Number(e.target.value), key)} min=\"0\" defaultValue={solver.memoryLimit} id=\"memoryLimit\" name=\"memoryLimit\"/>\n                            </div>\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"timeLimit\">Time limit [ms] (0 = not set)</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"number\" onChange={(e) => this.updateSolver(\"timeLimit\", Number(e.target.value), key)} min=\"0\" defaultValue={solver.timeLimit} id=\"timeLimit\" name=\"timeLimit\"/>\n                            </div>\n                        </div>\n                    </div>)\n                    }\n                <div className=\"btn-group mr-2\" role=\"group\">\n                    <button onClick={() => this.save()} className=\"btn btn-primary mt-2\">Save</button>\n                    <button onClick={() => this.addSolver()} className=\"btn btn-secondary mt-2\">New solver</button>\n                </div>\n            </div>);\n    }\n}\n\nexport default withRouter(NewRunPage);","import React from \"react\";\r\nimport {withRouter} from \"react-router\";\r\n\r\nimport {API, getInputValues} from \"../helpers\";\r\n\r\nconst extensions = [\".mzn\", \".dzn\"];\r\nconst names = [\"model\", \"data\"];\r\nclass EditModelPage extends React.Component {\r\n    state = {\r\n        name: \"\",\r\n        content: \"\",\r\n    };\r\n\r\n    async componentDidMount()\r\n    {\r\n        if(this.props.match.params.id !== \"new\")\r\n        {\r\n            const data = await API.call(\"GET\", `files/${this.props.match.params.id}`);\r\n            if(data && !data.error)\r\n            {\r\n                this.setState({\r\n                    name: data.filename,\r\n                    content: data.data,\r\n                });\r\n            }\r\n        }\r\n    }\r\n  \r\n    /**\r\n     * Validates, and saves the form data.\r\n     */\r\n    async save(e)\r\n    {\r\n        e.preventDefault();\r\n        const inputData = getInputValues(e.target.elements);\r\n\r\n        if(inputData.filename.length === 0)\r\n        {\r\n            alert(\"The name input is required for the \" + names[this.props.type]);\r\n        }else{\r\n            const IS_EDITING = this.props.match.params.id !== \"new\";\r\n            const route = IS_EDITING ? \"files/\" + this.props.match.params.id : \"files\";\r\n            const method = IS_EDITING ? \"PUT\" : \"POST\";\r\n\r\n            const data = await API.call(method, route, {\r\n                ...inputData,\r\n                data: this.state.content,\r\n                filetype: this.props.type,\r\n            });\r\n            if(data && !data.error)\r\n            {\r\n                alert(\"The \" + names[this.props.type] + \" has been saved!\");\r\n                this.props.history.push(\"/\");\r\n            }else{\r\n                alert(\"Something went wrong, try again\");\r\n            }\r\n        }\r\n    }\r\n\r\n    parseFile(e)\r\n    {\r\n        const file = e.target.files[0];\r\n        const fs = new FileReader();\r\n        fs.onload = (data) => {\r\n            this.setState({\r\n                content: data.target.result\r\n            });\r\n        };\r\n        fs.readAsText(file);\r\n    }\r\n\r\n    render()\r\n    {\r\n        const typeName = names[this.props.type];\r\n        const IS_EDITING = this.props.match.params.id !== \"new\";\r\n        return (<div className=\"container pt-4\">\r\n                    <form onSubmit={e => this.save(e)}>\r\n                        <h1>{IS_EDITING ? \"Edit \" + typeName : \"New \" + typeName}</h1>\r\n                        <div className=\"form-group pb-2\">\r\n                            <label for=\"nameInp\">Name</label>\r\n                            <input type=\"input\" disabled={IS_EDITING} defaultValue={this.state.name} className=\"form-control\" id=\"nameInp\" name=\"filename\" placeholder={`${typeName} name`}/>\r\n                        </div>\r\n                        <div className=\"form-group pb-2\">\r\n                            <label for=\"contentInp\">Model</label>\r\n                            <input id=\"contentInp\" type=\"file\" onChange={e => this.parseFile(e)} accept={extensions[this.props.type]} className=\"form-control\" />\r\n                        </div>\r\n                        <button className=\"btn btn-primary mt-2\">Save</button>\r\n                    </form>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default withRouter(EditModelPage);","// React component for the log page. The pages should call api /logs and then pass the data to this component.\n// The component will then render the log data into a table with the following columns:\n// -`userId` \n// -`sessionId`\n// -`requestId`\n// - `logPath`\n\nimport React from \"react\";\n\nimport {API} from \"../helpers\";\n\nexport default class HistoryPage extends React.Component {\n    state = {\n        logs: []\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"logs\").then(resp => {\n            if(resp && !resp.error)\n            {\n                \n                this.setState({\n                    logs: resp.data,\n                });\n            }\n        });\n    }\n\n    render()\n    {\n        return (<div className=\"container pt-8\">\n                <div className=\"row align-items-start\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card card-body\">\n                            <h3 className=\"text-center\">Logs</h3>\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>id</th>\n                                        <th>Session</th>\n                                        <th>Request</th>\n                                        <th>Path</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.logs.map(log => (\n                                        <tr key={log.id}>\n                                            <td>{log.id}</td>\n                                            <td>{log.userId}</td>\n                                            <td>{log.sessionId}</td>\n                                            <td>{log.requestId}</td>\n                                            <td>{log.logPath}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, {useState, useEffect} from \"react\";\nimport {HashRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nimport LoginPage from \"./components/LoginPage\";\nimport UserListPage from \"./components/UserListPage\";\nimport SolversPage from \"./components/SolversPage\";\nimport SignUpPage from \"./components/SignUpPage\";\nimport HistoryPage from \"./components/HistoryPage\";\nimport NewRunPage from \"./components/NewRunPage\";\nimport EditFilePage from \"./components/EditFilePage\";\n// import EditModelPage from \"./components/EditModelPage\";\n// import EditDataPage from \"./components/EditDataPage\";\nimport LogPage from \"./components/LogPage\";\n\nimport {API} from \"./helpers\"\n\nexport default function App()\n{\n  const [refreshToken, setRefreshTokenState] = useState(false);\n  const [userRank, setUserRank] = useState(1);\n\n  /**\n   * Sets the RefreshToken.\n   * @param string token the authToken\n   */\n  const setRefreshToken = (token) => {\n    API.refreshToken = token;\n    setRefreshTokenState(token);\n  };\n\n  const signOut = () => {\n    localStorage.removeItem(\"token\");\n    setUserRank(1);\n    setRefreshToken(false);\n  }; \n\n  useEffect(() => {\n    const t = localStorage.getItem(\"token\");\n    const r = localStorage.getItem(\"rank\");\n    if(t && r)\n    {\n      setUserRank(r);\n      setRefreshToken(t);\n    }\n  }, []);\n\n  const AdminRoute = (props) => userRank > 0 && <Route {...props}>\n                                    {props.children}\n                                  </Route>\n\n  return (<Router>\n        {\n          refreshToken ?\n            <>\n              <nav className=\"container-fluid navbar navbar-expand-lg navbar-light bg-light\">\n                <Link className=\"navbar-brand\" to=\"/\">MiniZinc</Link>\n\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                  <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                  <ul className=\"navbar-nav\">\n                    <li className=\"nav-item active\">\n                      <Link className=\"nav-link\" to=\"/\">Jobs</Link>\n                    </li>\n                    {\n                      userRank > 0 && <>\n                        <li className=\"nav-item\">\n                          <Link className=\"nav-link\" to=\"/users\">Users</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                          <Link className=\"nav-link\" to=\"/solvers\">Solvers</Link>\n                        </li>\n\n                        <li className=\"nav-item\">\n                          <Link className=\"nav-link\" to=\"/log\">Logs</Link>\n                        </li>\n                      </>\n                    }\n                    <li className=\"nav-item\">\n                      <Link className=\"nav-link\" to=\"/\" onClick={signOut}>Sign out</Link>\n                    </li>\n                  </ul>\n                </div>\n              </nav>\n\n              <Switch>\n              <Route path=\"/\" exact={true}>\n                <HistoryPage />\n              </Route>\n              <Route exact={true} path=\"/newRun\">\n                <NewRunPage/>\n              </Route>\n              <AdminRoute exact={true} path=\"/users\">\n                <UserListPage/>\n              </AdminRoute>\n              <AdminRoute exact={true} path=\"/solvers\">\n                <SolversPage/>\n              </AdminRoute>\n              <AdminRoute exact={true} path=\"/log\">\n                <LogPage/>\n              </AdminRoute>\n              <Route exact={true} path=\"/model/:id\">\n                <EditFilePage type={0}/>\n              </Route>\n              <Route exact={true} path=\"/data/:id\">\n                <EditFilePage type={1}/>\n              </Route>\n              <Route path=\"*\">\n                <HistoryPage />\n              </Route>\n            </Switch>\n            </>\n            : <Switch>\n              <Route path=\"/signup\">\n                <SignUpPage />\n              </Route>\n              <Route path=\"*\">\n                <LoginPage setRefreshToken={(t, rank = 0) => {\n                  setUserRank(rank);\n                  setRefreshToken(t);\n                  localStorage.setItem(\"token\", t);\n                  localStorage.setItem(\"rank\", rank);\n                }} />\n              </Route>\n            </Switch>\n      }\n      </Router>);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}