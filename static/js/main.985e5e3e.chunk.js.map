{"version":3,"sources":["components/UI/Spinner.js","helpers.js","components/LoginPage.js","components/SignUpPage.js","components/HistoryPage.js","components/NewRunPage.js","components/EditModelPage.js","components/EditDataPage.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","props","visible","className","role","IP","api","method","endpoint","data","fetch","headers","body","JSON","stringify","undefined","getInputValues","elements","reduce","obj","curr","name","value","API","then","d","json","catch","_","rawCall","Authorization","authToken","refreshToken","token","solvers","LoginPage","state","loading","e","a","preventDefault","this","setState","values","target","call","error","history","push","setAuthtoken","accessToken","onSubmit","checkLogin","type","to","React","Component","withRouter","SignUpPage","userInput","username","length","alert","password","passwordRepeat","signUp","required","HistoryPage","status","timestamp","id","models","key","size","getData","window","confirm","resp","map","Date","toLocaleString","model","onClick","delete","NewRunPage","newSolver","solver","flagA","flagF","flagP","currentModel","currentDataset","i","dataset","onChange","Number","defaultValue","style","width","htmlFor","updateSolver","checked","defaultChecked","min","class","save","addSolver","EditModelPage","content","match","params","inputData","IS_EDITING","route","for","placeholder","EditDataPage","App","useState","setAuthTokenState","path","t","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.985e5e3e.chunk.js","sourcesContent":["export default function Spinner(props)\n{\n    return props.visible && (<div className=\"position-absolute vh-100 vw-100 d-flex justify-content-center align-items-center bg-secondary opacity-75\">\n        <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>);\n}","const IP = \"localhost:8080\"; // Gateway IP\n\nexport function api(method = \"GET\", endpoint, data, token = false){\n    return fetch(`http://${IP}/${endpoint}`, {\n        method,\n        headers: {\n            // TODO: Token auth headers\n        },\n        body: data ? JSON.stringify(data) : undefined,\n    });\n}\n\nexport function getInputValues(elements)\n{\n    return [...elements].reduce((obj, curr) => {\n        if(curr.name)\n        {\n            obj[curr.name] = curr.value;\n        }\n        return obj;\n    }, {});\n}\n\nexport class API {\n    static authToken = false;\n    static refreshToken = false;\n\n    static rawCall(method, endpoint, headers = {}, body)\n    {\n       return fetch(`http://${IP}/${endpoint}`, {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined,\n        })\n        .then(d => d.json())\n        .catch(_ => false);\n    }\n\n    static async call(method = \"GET\", endpoint, body = {})\n    {\n        const data = await API.rawCall(method, endpoint, {\n            Authorization: API.authToken ?? undefined,\n        }, body);\n        if(!data && API.refreshToken) // Auth token expired, refresh it and retry\n        {\n            await API.refreshToken();\n            return await api(method, endpoint, data);\n        }else{\n            return data;\n        }\n    }\n\n    static async refreshToken()\n    {\n        const data = await API.rawCall(\"GET\", \"refreshToken\", {}, {\n            refreshToken: API.refreshToken,\n        });\n        if(data)\n        {\n            API.refreshToken = data.token;\n        }else{\n            API.refreshToken = false;\n        }\n    }\n}\n\nexport const solvers = [\"Gecode\", \"OR-tool\"];","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nimport Spinner from \"./UI/Spinner\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass LoginPage extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    /**\n     * Checks the credentials, and signs the user in if correct.\n     * @param SubmitEvent e \n     */\n    async checkLogin(e)\n    {\n        e.preventDefault();\n        this.setState({\n            loading: true,\n        });\n        const values = getInputValues(e.target.elements);\n\n        const data = await API.call(\"POST\", \"auth/login\", values);\n        if((data && !data.error)) // TODO: remove after servercheck\n        {\n            this.props.history.push(\"/\");\n            this.props.setAuthtoken(data.accessToken); // TODO: remove after servercheck\n        }else{\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render(){\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\n            <Spinner visible={this.state.loading} />\n            <form onSubmit={e => this.checkLogin(e)} className=\"d-flex flex-column align-self-center w-25\">\n                <label>Username:</label>\n                <input name=\"username\" className=\"form-control\" type=\"input\"/>\n                <label>Password:</label>\n                <input name=\"password\" className=\"form-control\" type=\"password\"/>\n                <button className=\"btn btn-primary mt-3\">\n                    Sign in\n                </button>\n                <div className=\"d-flex justify-content-center pt-2\">\n                    <Link to=\"/signup\">New user</Link>\n                </div>\n            </form>\n        </div>);\n    }\n}\n\nexport default withRouter(LoginPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nimport Spinner from \"./UI/Spinner\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass SignUpPage extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    /**\n     * Checks the userdata, and signs the user up if correct.\n     * @param SubmitEvent e \n     */\n    async signUp(e)\n    {\n        e.preventDefault();\n        this.setState({\n            loading: true,\n        });\n        const userInput = getInputValues(e.target.elements);\n        \n        if(userInput.username.length === 0)\n        {\n            alert(\"A username is required\");\n        }else if(userInput.password.length === 0)\n        {\n            alert(\"A password is required\");\n        }else if(userInput.password !== userInput.passwordRepeat){\n            alert(\"The two given password are not the same\");\n        }else{\n            const data = await API.call(\"POST\", \"auth/signup\", userInput);\n            this.setState({\n                loading: false,\n            });\n            if((data && !data.error)) // TODO: remove after servercheck\n            {\n                alert(\"Your user has been created!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"A unkown error orcurred, try again\");\n            }\n        }\n    }\n\n    render(){\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\n            <Spinner visible={this.state.loading} />\n            <form onSubmit={e => this.signUp(e)} className=\"d-flex flex-column align-self-center w-25\">\n                <label>Username:</label>\n                <input name=\"username\" required className=\"form-control\" type=\"input\"/>\n                <label>Password:</label>\n                <input name=\"password\" required className=\"form-control\" type=\"password\"/>\n                <label>Repeat password:</label>\n                <input name=\"passwordRepeat\" required className=\"form-control\" type=\"password\"/>\n                <button className=\"btn btn-primary mt-3\">\n                    Create account\n                </button>\n                <div className=\"d-flex justify-content-center pt-2\">\n                    <Link to=\"/\">Go back</Link>\n                </div>\n            </form>\n        </div>);\n    }\n}\n\nexport default withRouter(SignUpPage);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport {API} from \"../helpers\";\n\nexport default class HistoryPage extends React.Component {\n    state = {\n        history: [{\n            status: 1,\n            timestamp: 1637064108663,\n            id: 1,\n        }],\n        models: [{\n            key: 2132,\n            name: \"solveExam\",\n            size: 13132,\n        }],\n\n        data: [{\n            key: 132,\n            name: \"data.dzn\",\n            size: 13132,\n        }]\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Makes a DELETE call for the given type and id.\n     * @param {*} type \n     * @param {*} id \n     */\n    async delete(type, id)\n    {\n        const check = window.confirm(\"Are you sure you want to delete it?\");\n        if(check)\n        {\n            const data = await API.call(\"DELETE\", `/${type}/${id}`);\n            if(data)\n            {\n                this.getData();\n            }\n        }\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"/run\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    history: resp.data,\n                });\n            }\n        });\n        \n        API.call(\"GET\", \"/model\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    models: resp.data,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"/data\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    data: resp.data,\n                });\n            }\n        });\n    }\n    \n    render()\n    {\n        return (\n            //Move table to only  tage 2/3 of the left part of the page\n            <div className=\"container pt-4\">\n                <div className=\"row align-items-start\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card card-body\">\n                            <h3 className=\"text-center\">History</h3>\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Time</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.history.map(history => (\n                                        <tr key={history.id}>\n                                            <td>{history.id}</td>\n                                            <td>{new Date(history.timestamp).toLocaleString()}</td>\n                                            <td>{history.status === 0 ? \"Closed\" : \"Open\"}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row pt-1\">\n                    <Link to=\"/newRun\" className=\"d-grid gap-2\">\n                        <button type=\"button\" className=\"btn btn-primary\" >\n                            Start new run!\n                        </button>\n                    </Link>\n                </div>\n\n                <div className=\"row pt-4\">\n                    <div className=\"col-md-6\">\n                    <div className=\"card card-body\">\n                        <h3 className=\"text-center\">Models</h3>\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.models.map(model => (\n                                    <tr key={model.id}>\n                                        <td>{model.id}</td>\n                                        <td>{(model.name)}</td>\n                                        <td>{model.size}</td>\n                                        <td>\n                                            <Link to={`/model/${model.id}`} className=\"text-dark\">\n                                                <i className=\"bi bi-pencil-square\"/>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <i onClick={() => this.delete(\"model\", model.id)} role=\"button\" className=\"bi bi-trash\"></i>\n                                        </td>\n                                        <td>\n                                            <i className=\"bi bi-cloud-arrow-up\"></i>    \n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <Link to=\"/model/new\">\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\n                            Create new model!\n                        </button>\n                    </Link>\n                </div>\n                    \n                <div className=\"col-md-6\">\n                    <div className=\"card card-body\">\n                        <h3 className=\"text-center\">Data</h3>\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.data.map(data => (\n                                    <tr key={data.id}>\n                                        <td>{data.id}</td>\n                                        <td>{data.name}</td>\n                                        <td>{data.size}</td>\n                                        <td>\n                                            <Link to={`/data/${data.id}`} className=\"text-dark\">\n                                                <i className=\"bi bi-pencil-square\"/>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <i onClick={() => this.delete(\"data\", data.id)} role=\"button\" className=\"bi bi-trash\"/>\n                                        </td>\n                                        <td>\n                                            <i className=\"bi bi-cloud-arrow-up\"/>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <Link to=\"/data/new\">\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\n                            Create new dataset!\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    }\n                \n           \n    \n    \n}\n\n\n","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, solvers} from \"../helpers\";\n\n// Create a new component that will produce some HTML where a user can choose multiple Solver from a dropdown and also give a text input for some flags to set.\nclass NewRunPage extends React.Component {\n    newSolver = {\n        solver: solvers[0],\n        flagA: false,\n        flagF: false,\n        flagP: 1,\n    };\n\n    state = {\n        models: [],\n        data: [],\n\n        currentModel: 0,\n        currentDataset: 0,\n        solvers: [],\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"/model\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    models: resp.data,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"/data\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    data: resp.data,\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates the given attribute on the given solver.\n     * @param String key \n     * @param String value \n     * @param Number i \n     */\n    updateSolver(key, value, i)\n    {\n        const solvers = [...this.state.solvers];\n        const data = {...solvers[i]};\n        data[key] = value;\n        solvers[i] = data;\n        this.setState({\n            solvers,\n        });\n    }\n\n    /**\n     * Adds a blank solver to the state.\n     */\n    addSolver()\n    {\n        this.setState({\n            solvers: [\n                ...this.state.solvers,\n                {\n                    ...this.newSolver\n                }\n            ]\n        });\n    }\n\n    /**\n     * Validates, and saves the form data.\n     */\n    async save()\n    {\n        const data = {\n            model: this.state.currentModel,\n            dataset: this.state.currentDataset,\n            solvers: [...this.state.solvers],\n        };\n        if(data.model === 0)\n        {\n            alert(\"A valid model needs to be choosen\");\n        }else if(data.dataset === 0)\n        {\n            alert(\"A valid dataset needs to be choosen\");\n        }else if(data.solvers.length === 0)\n        {\n            alert(\"You need atleast one solver\");\n        }else{\n            const resp = await API.call(\"POST\", \"run\", data);\n            if(resp && !resp.error)\n            {\n                alert(\"Your run has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again.\");\n            }\n        }\n    }\n\n    render()\n    {\n        return (<div className=\"container pt-4\">\n                    <h1>New run</h1>\n                    <label>Model:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentModel: Number(e.target.value)})} defaultValue={this.state.currentModel} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a model</option>\n                            {this.state.models.map(model => (\n                                <option value={model.id} key={model.id}>{model.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <label>Dataset:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentDataset: Number(e.target.value)})} defaultValue={this.state.currentDataset} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a dataset</option>\n                            {this.state.data.map(data => (\n                                <option value={data.id} key={data.id}>{data.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    \n                    {\n                        this.state.solvers.map((solver, key) => <div className=\"pt-4 pb-4 border-top\" key={key}>\n                        <label htmlFor=\"solver\">\n                            <h5>Solver #{key + 1}</h5>\n                        </label>\n                        <select onChange={(e) => this.updateSolver(\"solver\", e.target.value, key)} className=\"form-select form-select-lg mb-2\" aria-label=\".form-select-lg example\" id=\"solver\">\n                            {\n                                solvers.map((solver, i) => <option value={solver} key={i}>{solver}</option>)\n                            }\n                        </select>\n                        <h6>Flags</h6>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagA\">All solutions?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" id=\"flagA\" onChange={(e) => this.updateSolver(\"flagA\", e.target.checked, key)} defaultChecked={solver.flagA} name=\"flagA\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagF\">Free search?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" onChange={(e) => this.updateSolver(\"flagF\", e.target.checked, key)} id=\"flagF\" defaultChecked={solver.flagF} name=\"flagF\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagP\">Threads</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"number\" onChange={(e) => this.updateSolver(\"solver\", Number(e.target.value), key)} min=\"0\" defaultValue={solver.flagP} id=\"flagP\" name=\"flagP\"/>\n                            </div>\n                        </div>\n                    </div>)\n                    }\n                <div class=\"btn-group mr-2\" role=\"group\">\n                    <button onClick={() => this.save()} className=\"btn btn-primary mt-2\">Save</button>\n                    <button onClick={() => this.addSolver()} className=\"btn btn-secondary mt-2\">New solver</button>\n                </div>\n            </div>);\n    }\n}\n\nexport default withRouter(NewRunPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass EditModelPage extends React.Component {\n    state = {\n        name: \"\",\n        content: \"\",\n    };\n\n    async componentDidMount()\n    {\n        if(this.props.match.params.id !== \"new\")\n        {\n            const data = await API.call(\"GET\", `/model/${this.props.match.params.id}`);\n            if(data && !data.error)\n            {\n                this.setState({\n                    name: data.name,\n                    content: data.content,\n                });\n            }\n        }\n    }\n  \n    /**\n     * Validates, and saves the form data.\n     */\n    async save(e)\n    {\n        e.preventDefault();\n        const inputData = getInputValues(e.target.elements);\n\n        if(inputData.name.length === 0)\n        {\n            alert(\"The name input is required for the model\");\n        }else if(inputData.content.length === 0)\n        {\n            alert(\"The content input is required for the model\");\n        }else{\n            const IS_EDITING = this.props.match.params.id !== \"new\";\n            const route = IS_EDITING ? \"/model/\" + this.props.match.params.id : \"/model\";\n            const method = IS_EDITING ? \"PUT\" : \"POST\";\n\n            const data = await API.call(method, route, inputData);\n            if(data && !data.error)\n            {\n                alert(\"The model has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again\");\n            }\n        }\n    }\n\n    render()\n    {\n        const IS_EDITING = this.props.match.params.id !== \"new\";\n        return (<div className=\"container pt-4\">\n                    <form onSubmit={e => this.save(e)}>\n                        <h1>{IS_EDITING ? \"Edit model\" : \"New model\"}</h1>\n                        <div className=\"form-group\">\n                            <label for=\"nameInp\">Name</label>\n                            <input type=\"input\" defaultValue={this.state.name} className=\"form-control\" id=\"nameInp\" name=\"name\" placeholder=\"Model name\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"contentInp\">Model</label>\n                            <textarea type=\"input\" defaultValue={this.state.content} placeholder=\"Contents of model itself..\" className=\"form-control\" id=\"contentInp\" name=\"content\"/>\n                        </div>\n                        <button className=\"btn btn-primary mt-2\">Save</button>\n                    </form>\n            </div>);\n    }\n}\n\nexport default withRouter(EditModelPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass EditDataPage extends React.Component {\n\n    state = {\n        name: \"\",\n        content: \"\",\n    };\n\n    async componentDidMount()\n    {\n        if(this.props.match.params.id !== \"new\")\n        {\n            const data = await API.call(\"GET\", `/data/${this.props.match.params.id}`);\n            if(data && !data.error)\n            {\n                this.setState({\n                    name: data.name,\n                    content: data.content,\n                });\n            }\n        }\n    }\n  \n    /**\n     * Validates, and saves the form data.\n     */\n    async save(e)\n    {\n        e.preventDefault();\n        const inputData = getInputValues(e.target.elements);\n\n        if(inputData.name.length === 0)\n        {\n            alert(\"The name input is required for the model\");\n        }else if(inputData.content.length === 0)\n        {\n            alert(\"The content input is required for the model\");\n        }else{\n            const IS_EDITING = this.props.match.params.id !== \"new\";\n            const route = IS_EDITING ? \"/data/\" + this.props.match.params.id : \"/data\";\n            const method = IS_EDITING ? \"PUT\" : \"POST\";\n            \n            const data = await API.call(method, route, inputData);\n            if(data && !data.error)\n            {\n                alert(\"The model has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again\");\n            }\n        }\n    }\n\n    render()\n    {\n        const IS_EDITING = this.props.match.params.id !== \"new\";\n        return (<div className=\"container pt-4\">\n                    <form onSubmit={e => this.save(e)}>\n                        <h1>{IS_EDITING ? \"Edit dataset\" : \"New dataset\"}</h1>\n                        <div className=\"form-group\">\n                            <label for=\"nameInp\">Name</label>\n                            <input type=\"input\" defaultValue={this.state.name} className=\"form-control\" id=\"nameInp\" name=\"name\" placeholder=\"Dataset name\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"contentInp\">Data</label>\n                            <textarea type=\"input\" defaultValue={this.state.content} placeholder=\"Contents of data itself..\" className=\"form-control\" id=\"contentInp\" name=\"content\"/>\n                        </div>\n                        <button className=\"btn btn-primary mt-2\">Save</button>\n                    </form>\n            </div>);\n    }\n}\n\nexport default withRouter(EditDataPage);","import React, {useState} from \"react\";\nimport {HashRouter as Router, Switch, Route} from \"react-router-dom\";\n\nimport LoginPage from \"./components/LoginPage\";\nimport SignUpPage from \"./components/SignUpPage\";\nimport HistoryPage from \"./components/HistoryPage\";\nimport NewRunPage from \"./components/NewRunPage\";\nimport EditModelPage from \"./components/EditModelPage\";\nimport EditDataPage from \"./components/EditDataPage\";\n\nimport {API} from \"./helpers\";\n\nexport default function App()\n{\n  const [authToken, setAuthTokenState] = useState(false);\n\n  /**\n   * Sets the AuthToken.\n   * @param string token the authToken\n   */\n  const setAuthToken = (token) => {\n    API.authToken = token;\n    setAuthTokenState(token);\n  };\n\n  return (<Router>\n        {\n          authToken ?\n            <Switch>\n              <Route path=\"/newRun\">\n                <NewRunPage/>\n              </Route>\n              <Route path=\"/model/:id\">\n                <EditModelPage/>\n              </Route>\n              <Route path=\"/data/:id\">\n                <EditDataPage/>\n              </Route>\n              <Route path=\"*\">\n                <HistoryPage />\n              </Route>\n            </Switch>\n            : <Switch>\n              <Route path=\"/signup\">\n                <SignUpPage />\n              </Route>\n              <Route path=\"*\">\n                <LoginPage setAuthtoken={t => setAuthToken(t)} />\n              </Route>\n            </Switch>\n      }\n      </Router>);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}