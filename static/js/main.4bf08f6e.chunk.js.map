{"version":3,"sources":["components/UI/Spinner.js","helpers.js","components/LoginPage.js","components/UserListPage.js","components/SolversPage.js","components/SignUpPage.js","components/HistoryPage.js","components/NewRunPage.js","components/EditModelPage.js","components/EditDataPage.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","props","visible","className","role","IP","getInputValues","elements","reduce","obj","curr","name","value","API","method","endpoint","headers","body","fetch","JSON","stringify","undefined","then","d","status","error","json","catch","e","rawCall","Authorization","authToken","data","refreshToken","getAccessToken","call","token","accessToken","solvers","LoginPage","state","loading","a","preventDefault","this","setState","values","target","history","push","setRefreshToken","userRank","alert","onSubmit","checkLogin","type","to","React","Component","withRouter","UserListPage","user","id","username","recourseLimit","getData","resp","str","test","map","onClick","enteredLimit","prompt","isInt","SolversPage","editing","window","confirm","file","files","FormData","append","isEditing","isNew","editingData","htmlFor","defaultValue","disabled","accept","onChange","upload","scope","key","delete","SignUpPage","userInput","length","password","passwordRepeat","signUp","required","HistoryPage","timestamp","models","size","Date","toLocaleString","model","NewRunPage","newSolver","solver","flagA","flagF","flagP","currentModel","currentDataset","i","dataset","Number","style","width","class","for","updateSolver","checked","defaultChecked","min","save","addSolver","EditModelPage","content","match","params","inputData","IS_EDITING","route","placeholder","EditDataPage","App","useState","setRefreshTokenState","setUserRank","path","exact","t","rank","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bf08f6e.chunk.js","sourcesContent":["export default function Spinner(props)\n{\n    return props.visible && (<div className=\"position-absolute vh-100 vw-100 d-flex justify-content-center align-items-center bg-secondary opacity-75\">\n        <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>);\n}","const IP = \"localhost:8080\"; // Gateway IP\n\nexport function api(method = \"GET\", endpoint, data, token = false){\n    return fetch(`http://${IP}/${endpoint}`, {\n        method,\n        headers: {\n            // TODO: Token auth headers\n        },\n        body: data ? JSON.stringify(data) : undefined,\n    });\n}\n\nexport function getInputValues(elements)\n{\n    return [...elements].reduce((obj, curr) => {\n        if(curr.name)\n        {\n            obj[curr.name] = curr.value;\n        }\n        return obj;\n    }, {});\n}\n\nexport class API {\n    static authToken = false;\n    static refreshToken = false;\n\n    static rawCall(method, endpoint, headers = {}, body)\n    {\n       return fetch(`http://${IP}/${endpoint}`, {\n            method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...headers,\n            },\n            body: body ? JSON.stringify(body) : undefined,\n        })\n        .then(d => d.status === 404 ? {error: true} : d.json()) // Dont try to refresh accessToken on 404\n        .catch(e => false);\n    }\n\n    static async call(method = \"GET\", endpoint, body = {}, headers = {})\n    {\n        const data = await API.rawCall(method, endpoint, {\n            Authorization: API.authToken ?? undefined,\n            ...headers,\n        }, body);\n\n        if(!data && API.refreshToken) // Auth token expired, refresh it and retry\n        {\n            await API.getAccessToken();\n            return (await API.call(method, endpoint, data, headers));\n        }else{\n            return data;\n        }\n    }\n\n    static async getAccessToken()\n    {\n        const data = await API.rawCall(\"POST\", \"auth/accessToken\", {}, {\n            token: API.refreshToken,\n        });\n        if(data)\n        {\n            API.accessToken = data.token;\n        }else{\n            API.refreshToken = false;\n        }\n    }\n}\n\nexport const solvers = [\"Gecode\", \"OR-tool\"];","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nimport Spinner from \"./UI/Spinner\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass LoginPage extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    /**\n     * Checks the credentials, and signs the user in if correct.\n     * @param SubmitEvent e \n     */\n    async checkLogin(e)\n    {\n        e.preventDefault();\n        this.setState({\n            loading: true,\n        });\n        const values = getInputValues(e.target.elements);\n\n        const data = await API.call(\"POST\", \"auth/login\", values);\n        if((data && !data.error))\n        {\n            this.props.history.push(\"/\");\n            this.props.setRefreshToken(data.refreshToken, data.userRank);\n        }else{\n            alert(\"Wrong username, or password.\");\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render(){\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\n            <Spinner visible={this.state.loading} />\n            <form onSubmit={e => this.checkLogin(e)} className=\"d-flex flex-column align-self-center w-25\">\n                <label>Username:</label>\n                <input name=\"username\" className=\"form-control\" type=\"input\"/>\n                <label>Password:</label>\n                <input name=\"password\" className=\"form-control\" type=\"password\"/>\n                <button className=\"btn btn-primary mt-3\">\n                    Sign in\n                </button>\n                <div className=\"d-flex justify-content-center pt-2\">\n                    <Link to=\"/signup\">New user</Link>\n                </div>\n            </form>\n        </div>);\n    }\n}\n\nexport default withRouter(LoginPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {API} from \"../helpers\";\n\n\n\nclass UserListPage extends React.Component {\n    \n    state = {\n        user: [{id: 1, username: \"oliver\", recourseLimit: 6}],\n       \n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"/users\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    user: resp.data,\n                });\n            }\n        });\n    }\n    isInt(str) {\n        return /^\\+?(0|[1-9]\\d*)$/.test(str);\n    }\n    render()\n    {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1>User List</h1>\n                        <table className=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th>Username</th>\n                                    <th>Delete</th>\n                                    <th>Stop Que</th>\n                                    <th>Recourse Limit</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.user.map(user => {\n                                        return (\n                                            <tr key={user.id}>\n                                                <td>{user.username}</td>\n                                                <td>\n                                                    <button className=\"btn btn-danger\" onClick={() => {\n                                                        API.call(\"DELETE\", `/users/${user.id}`).then(resp => {\n                                                            if(resp && !resp.error)\n                                                            {\n                                                                this.getData();\n                                                            }\n                                                        });\n                                                    }}>Delete</button>\n                                                </td>\n                                                <td>\n                                                    <button className=\"btn btn-danger\" onClick={() => {\n                                                        API.call(\"PUT\", `/users/${user.id}/stop`).then(resp => {\n                                                            if(resp && !resp.error)\n                                                            {\n                                                                this.getData();\n                                                            }\n                                                        });\n                                                    }}>Stop Que</button>\n                                                </td>\n                                                <td> \n                                                    <button className=\"btn btn-secondary\" onClick={() => {\n                                                       const enteredLimit = prompt('Set recourse limit for user: ' + user.username, user.recourseLimit);\n                                                       if (this.isInt(enteredLimit) === true){\n                                                         API.call(\"PUT\", `/users/${user.id}/recourseLimit/${enteredLimit}`).then(resp => {\n                                                                if(resp && !resp.error)\n                                                                {\n                                                                    this.getData();\n                                                                    <div class=\"alert alert-success\" role=\"alert\">\n                                                                        <h4 class=\"alert-heading\">Updated!</h4>\n                                                                        <p>The recourse limit for user {user.username} has been updated to {enteredLimit}.</p>\n                                                                        </div>\n                                                                }\n                                                            \n                                                    })\n                                                    \n                                                    \n                                                    }else{\n                                                        <div class=\"alert alert-alert\" role=\"alert\">\n                                                        <h4 class=\"alert-heading\">Error!</h4>\n                                                        <p>The recourse limit for user {user.username} has not been updated. Please enter a valid number.</p>\n                                                        \n                                                        </div>\n                                                    }\n                                                    }}>\n                                                    {user.recourseLimit}</button></td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    \n        \n\n        \n    }\n\n}export default withRouter(UserListPage);","import React from \"react\";\n\nimport {API} from \"../helpers.js\";\n\nexport default class SolversPage extends React.Component {\n    state = {\n        solvers: [{\n            id: 10,\n            name: \"test\",\n\n        }],\n\n        editing: 0,\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    async getData()\n    {\n        const data = await API.call(\"GET\", \"/solvers\");\n        if(data && !data.error)\n        {\n            this.setState({\n                data: data.data,\n            });\n        }\n    }\n\n    async delete(id)\n    {\n        const check = window.confirm(\"Are you sure you want to delete it?\");\n        if(check)\n        {\n            await API.call(\"DELETE\", \"/solvers/\" + id);\n            await this.getData();\n        }\n    }\n\n    async upload(e)\n    {\n        const file = e.target.files[0];\n        let data = new FormData();\n        data.append('file', file);\n\n        const resp = await API.call(\"PUT\", \"/solvers/\" + this.state.editing + \"/image\", data, {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        });\n        if(resp && !resp.error)\n        {\n            alert(\"The file has been uploaded!\");\n        }\n    }\n\n    render()\n    {\n        const isEditing = typeof this.state.editing === \"number\";\n        const isNew = this.state.editing === \"new\";\n        const editingData = isEditing ? this.state.solvers[this.state.editing] : {};\n\n        return <div className=\"container-fluid\">\n            {\n                (isEditing || isNew) && <div className=\"pb-2 mb-2 border-bottom\">\n                    <h1>{isEditing ? \"Editing solver\" : \"New solver\"}</h1>\n                    <div className=\"row\">\n                        <div className=\"col-sm-2\">\n                            <label htmlFor=\"name\">Name</label>\n                        </div>\n                        <div className=\"col-sm-10 pb-1\">\n                            <input className=\"form-control\" name=\"name\" defaultValue={editingData.name} />\n                        </div>\n                        <div className=\"col-sm-2\">\n                            <label htmlFor=\"name\">Image</label>\n                        </div>\n                        <div className=\"col-sm-10\">\n                            <input className=\"form-control\" type=\"file\" name=\"name\" disabled={isNew} accept=\".png,.jpg\" onChange={(e) => this.upload(e)} />\n                        </div>\n                    </div>\n                    <button onClick={() => this.setState({editing: \"new\"})} className=\"btn btn-light\">Save</button>\n                </div>\n            }\n            <h1>Solvers</h1>\n            <button onClick={() => this.setState({editing: \"new\"})} className=\"btn btn-primary\">New solver</button>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\"></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.state.solvers.map((data, key) => <tr key={data.id}>\n                            <th scope=\"row\">{data.id}</th>\n                            <td>{data.name}</td>\n                            <td>\n                                <button onClick={() => this.setState({editing: key})} className=\"btn m-1 mt-0 mb-0 btn-secondary\">Edit</button>\n                                <button onClick={() => this.delete(data.id)} className=\"btn btn-danger\">Delete</button>\n                            </td>\n                        </tr>)\n                    }\n                </tbody>\n                </table>\n        </div>\n    }\n}","import React from \"react\";\nimport {withRouter} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nimport Spinner from \"./UI/Spinner\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass SignUpPage extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    /**\n     * Checks the userdata, and signs the user up if correct.\n     * @param SubmitEvent e \n     */\n    async signUp(e)\n    {\n        e.preventDefault();\n        const userInput = getInputValues(e.target.elements);\n        \n        if(userInput.username.length === 0)\n        {\n            alert(\"A username is required\");\n        }else if(userInput.password.length === 0)\n        {\n            alert(\"A password is required\");\n        }else if(userInput.password !== userInput.passwordRepeat){\n            alert(\"The two given password are not the same\");\n        }else{\n            this.setState({\n                loading: true,\n            });\n            const data = await API.call(\"POST\", \"auth/register\", userInput);\n            this.setState({\n                loading: false,\n            });\n            if((data && !data.error))\n            {\n                alert(\"Your user has been created!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"A unkown error orcurred, try again\");\n            }\n        }\n    }\n\n    render(){\n        return (<div className=\"d-flex justify-content-center align-items-center vh-100\">\n            <Spinner visible={this.state.loading} />\n            <form onSubmit={e => this.signUp(e)} className=\"d-flex flex-column align-self-center w-25\">\n                <label>Username:</label>\n                <input name=\"username\" required className=\"form-control\" type=\"input\"/>\n                <label>Password:</label>\n                <input name=\"password\" required className=\"form-control\" type=\"password\"/>\n                <label>Repeat password:</label>\n                <input name=\"passwordRepeat\" required className=\"form-control\" type=\"password\"/>\n                <button className=\"btn btn-primary mt-3\">\n                    Create account\n                </button>\n                <div className=\"d-flex justify-content-center pt-2\">\n                    <Link to=\"/\">Go back</Link>\n                </div>\n            </form>\n        </div>);\n    }\n}\n\nexport default withRouter(SignUpPage);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport {API} from \"../helpers\";\n\nexport default class HistoryPage extends React.Component {\n    state = {\n        history: [{\n            status: 1,\n            timestamp: 1637064108663,\n            id: 1,\n        }],\n        models: [{\n            key: 2132,\n            name: \"solveExam\",\n            size: 13132,\n        }],\n\n        data: [{\n            key: 132,\n            name: \"data.dzn\",\n            size: 13132,\n        }]\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Makes a DELETE call for the given type and id.\n     * @param {*} type \n     * @param {*} id \n     */\n    async delete(type, id)\n    {\n        const check = window.confirm(\"Are you sure you want to delete it?\");\n        if(check)\n        {\n            const data = await API.call(\"DELETE\", `${type}/${id}`);\n            if(data)\n            {\n                this.getData();\n            }\n        }\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"run\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    history: resp.data,\n                });\n            }\n        });\n        \n        API.call(\"GET\", \"model\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    models: resp.data,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"data\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    data: resp.data,\n                });\n            }\n        });\n    }\n    \n    render()\n    {\n        return (\n            //Move table to only  tage 2/3 of the left part of the page\n            <div className=\"container pt-4\">\n                <div className=\"row align-items-start\">\n                    <div className=\"col-md-12\">\n                        <div className=\"card card-body\">\n                            <h3 className=\"text-center\">History</h3>\n                            <table className=\"table table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Time</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.history.map(history => (\n                                        <tr key={history.id}>\n                                            <td>{history.id}</td>\n                                            <td>{new Date(history.timestamp).toLocaleString()}</td>\n                                            <td>{history.status === 0 ? \"Closed\" : \"Open\"}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row pt-1\">\n                    <Link to=\"/newRun\" className=\"d-grid gap-2\">\n                        <button type=\"button\" className=\"btn btn-primary\" >\n                            Start new run!\n                        </button>\n                    </Link>\n                </div>\n\n                <div className=\"row pt-4\">\n                    <div className=\"col-md-6\">\n                    <div className=\"card card-body\">\n                        <h3 className=\"text-center\">Models</h3>\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.models.map(model => (\n                                    <tr key={model.id}>\n                                        <td>{model.id}</td>\n                                        <td>{(model.name)}</td>\n                                        <td>{model.size}</td>\n                                        <td>\n                                            <Link to={`/model/${model.id}`} className=\"text-dark\">\n                                                <i className=\"bi bi-pencil-square\"/>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <i onClick={() => this.delete(\"model\", model.id)} role=\"button\" className=\"bi bi-trash\"></i>\n                                        </td>\n                                        <td>\n                                            <i className=\"bi bi-cloud-arrow-up\"></i>    \n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <Link to=\"/model/new\">\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\n                            Create new model!\n                        </button>\n                    </Link>\n                </div>\n                    \n                <div className=\"col-md-6\">\n                    <div className=\"card card-body\">\n                        <h3 className=\"text-center\">Data</h3>\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Name</th>\n                                    <th>Size</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.data.map(data => (\n                                    <tr key={data.id}>\n                                        <td>{data.id}</td>\n                                        <td>{data.name}</td>\n                                        <td>{data.size}</td>\n                                        <td>\n                                            <Link to={`/data/${data.id}`} className=\"text-dark\">\n                                                <i className=\"bi bi-pencil-square\"/>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <i onClick={() => this.delete(\"data\", data.id)} role=\"button\" className=\"bi bi-trash\"/>\n                                        </td>\n                                        <td>\n                                            <i className=\"bi bi-cloud-arrow-up\"/>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                    <Link to=\"/data/new\">\n                        <button type=\"button\" className=\"btn btn-primary mt-1 w-100\">\n                            Create new dataset!\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n        );\n    }\n                \n           \n    \n    \n}\n\n\n","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, solvers} from \"../helpers\";\n\n// Create a new component that will produce some HTML where a user can choose multiple Solver from a dropdown and also give a text input for some flags to set.\nclass NewRunPage extends React.Component {\n    newSolver = {\n        solver: solvers[0],\n        flagA: false,\n        flagF: false,\n        flagP: 1,\n    };\n\n    state = {\n        models: [],\n        data: [],\n\n        currentModel: 0,\n        currentDataset: 0,\n        solvers: [],\n    };\n\n    componentDidMount()\n    {\n        this.getData();\n    }\n\n    /**\n     * Gets the data and model data.\n     */\n    getData()\n    {\n        API.call(\"GET\", \"/model\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    models: resp.data,\n                });\n            }\n        });\n\n        API.call(\"GET\", \"/data\").then(resp => {\n            if(resp && !resp.error)\n            {\n                this.setState({\n                    data: resp.data,\n                });\n            }\n        });\n    }\n\n    /**\n     * Updates the given attribute on the given solver.\n     * @param String key \n     * @param String value \n     * @param Number i \n     */\n    updateSolver(key, value, i)\n    {\n        const solvers = [...this.state.solvers];\n        const data = {...solvers[i]};\n        data[key] = value;\n        solvers[i] = data;\n        this.setState({\n            solvers,\n        });\n    }\n\n    /**\n     * Adds a blank solver to the state.\n     */\n    addSolver()\n    {\n        this.setState({\n            solvers: [\n                ...this.state.solvers,\n                {\n                    ...this.newSolver\n                }\n            ]\n        });\n    }\n\n    /**\n     * Validates, and saves the form data.\n     */\n    async save()\n    {\n        const data = {\n            model: this.state.currentModel,\n            dataset: this.state.currentDataset,\n            solvers: [...this.state.solvers],\n        };\n        if(data.model === 0)\n        {\n            alert(\"A valid model needs to be choosen\");\n        }else if(data.solvers.length === 0)\n        {\n            alert(\"You need atleast one solver\");\n        }else{\n            const resp = await API.call(\"POST\", \"run\", data);\n            if(resp && !resp.error)\n            {\n                alert(\"Your run has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again.\");\n            }\n        }\n    }\n\n    render()\n    {\n        return (<div className=\"container pt-4\">\n                    <h1>New run</h1>\n                    <label>Model:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentModel: Number(e.target.value)})} defaultValue={this.state.currentModel} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a model</option>\n                            {this.state.models.map(model => (\n                                <option value={model.id} key={model.id}>{model.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <label>Dataset:</label>\n                    <div className=\"dropdown\">\n                        <select className=\"form-select form-select-lg mb-2\" onChange={(e) => this.setState({currentDataset: Number(e.target.value)})} defaultValue={this.state.currentDataset} aria-label=\".form-select-lg\" style={{ width: '40%' }}>\n                            <option value=\"0\">Choose a dataset</option>\n                            {this.state.data.map(data => (\n                                <option value={data.id} key={data.id}>{data.name}</option>\n                            ))}\n                        </select>\n                    </div>\n\n\n                    <div class=\"custom-control custom-checkbox\">\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"customCheck1\"></input>\n                    <label class=\"custom-control-label\" for=\"customCheck1\"> Parallel run</label>\n                    </div>\n\n                    <div className=\"col-sm-4\">\n                        <label htmlFor=\"timeLimit\">Time limit in seconds</label>\n                    </div>\n                    <div className=\"col-sm-8\">\n                        <input type=\"number\" id=\"timeLim\" name=\"timeLim\"/>\n                    </div>\n\n                    {\n                        this.state.solvers.map((solver, key) => <div className=\"pt-4 pb-4 border-top\" key={key}>\n                        <label htmlFor=\"solver\">\n                            <h5>Solver #{key + 1}</h5>\n                        </label>\n                        <select onChange={(e) => this.updateSolver(\"solver\", e.target.value, key)} className=\"form-select form-select-lg mb-2\" aria-label=\".form-select-lg example\" id=\"solver\">\n                            {\n                                solvers.map((solver, i) => <option value={solver} key={i}>{solver}</option>)\n                            }\n                        </select>\n                        <h6>Flags</h6>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagA\">All solutions?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" id=\"flagA\" onChange={(e) => this.updateSolver(\"flagA\", e.target.checked, key)} defaultChecked={solver.flagA} name=\"flagA\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagF\">Free search?</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"checkbox\" onChange={(e) => this.updateSolver(\"flagF\", e.target.checked, key)} id=\"flagF\" defaultChecked={solver.flagF} name=\"flagF\"/>\n                            </div>\n\n                            <div className=\"col-sm-4\">\n                                <label htmlFor=\"flagP\">Threads</label>\n                            </div>\n                            <div className=\"col-sm-8\">\n                                <input type=\"number\" onChange={(e) => this.updateSolver(\"solver\", Number(e.target.value), key)} min=\"0\" defaultValue={solver.flagP} id=\"flagP\" name=\"flagP\"/>\n                            </div>\n                        </div>\n                    </div>)\n                    }\n                <div class=\"btn-group mr-2\" role=\"group\">\n                    <button onClick={() => this.save()} className=\"btn btn-primary mt-2\">Save</button>\n                    <button onClick={() => this.addSolver()} className=\"btn btn-secondary mt-2\">New solver</button>\n                </div>\n            </div>);\n    }\n}\n\nexport default withRouter(NewRunPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass EditModelPage extends React.Component {\n    state = {\n        name: \"\",\n        content: \"\",\n    };\n\n    async componentDidMount()\n    {\n        if(this.props.match.params.id !== \"new\")\n        {\n            const data = await API.call(\"GET\", `/model/${this.props.match.params.id}`);\n            if(data && !data.error)\n            {\n                this.setState({\n                    name: data.name,\n                    content: data.content,\n                });\n            }\n        }\n    }\n  \n    /**\n     * Validates, and saves the form data.\n     */\n    async save(e)\n    {\n        e.preventDefault();\n        const inputData = getInputValues(e.target.elements);\n\n        if(inputData.name.length === 0)\n        {\n            alert(\"The name input is required for the model\");\n        }else if(inputData.content.length === 0)\n        {\n            alert(\"The content input is required for the model\");\n        }else{\n            const IS_EDITING = this.props.match.params.id !== \"new\";\n            const route = IS_EDITING ? \"/model/\" + this.props.match.params.id : \"/model\";\n            const method = IS_EDITING ? \"PUT\" : \"POST\";\n\n            const data = await API.call(method, route, inputData);\n            if(data && !data.error)\n            {\n                alert(\"The model has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again\");\n            }\n        }\n    }\n\n    render()\n    {\n        const IS_EDITING = this.props.match.params.id !== \"new\";\n        return (<div className=\"container pt-4\">\n                    <form onSubmit={e => this.save(e)}>\n                        <h1>{IS_EDITING ? \"Edit model\" : \"New model\"}</h1>\n                        <div className=\"form-group\">\n                            <label for=\"nameInp\">Name</label>\n                            <input type=\"input\" defaultValue={this.state.name} className=\"form-control\" id=\"nameInp\" name=\"name\" placeholder=\"Model name\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"contentInp\">Model</label>\n                            <textarea type=\"input\" defaultValue={this.state.content} placeholder=\"Contents of model itself..\" className=\"form-control\" id=\"contentInp\" name=\"content\"/>\n                        </div>\n                        <button className=\"btn btn-primary mt-2\">Save</button>\n                    </form>\n            </div>);\n    }\n}\n\nexport default withRouter(EditModelPage);","import React from \"react\";\nimport {withRouter} from \"react-router\";\n\nimport {API, getInputValues} from \"../helpers\";\n\nclass EditDataPage extends React.Component {\n\n    state = {\n        name: \"\",\n        content: \"\",\n    };\n\n    async componentDidMount()\n    {\n        if(this.props.match.params.id !== \"new\")\n        {\n            const data = await API.call(\"GET\", `/data/${this.props.match.params.id}`);\n            if(data && !data.error)\n            {\n                this.setState({\n                    name: data.name,\n                    content: data.content,\n                });\n            }\n        }\n    }\n  \n    /**\n     * Validates, and saves the form data.\n     */\n    async save(e)\n    {\n        e.preventDefault();\n        const inputData = getInputValues(e.target.elements);\n\n        if(inputData.name.length === 0)\n        {\n            alert(\"The name input is required for the model\");\n        }else if(inputData.content.length === 0)\n        {\n            alert(\"The content input is required for the model\");\n        }else{\n            const IS_EDITING = this.props.match.params.id !== \"new\";\n            const route = IS_EDITING ? \"/data/\" + this.props.match.params.id : \"/data\";\n            const method = IS_EDITING ? \"PUT\" : \"POST\";\n            \n            const data = await API.call(method, route, inputData);\n            if(data && !data.error)\n            {\n                alert(\"The model has been saved!\");\n                this.props.history.push(\"/\");\n            }else{\n                alert(\"Something went wrong, try again\");\n            }\n        }\n    }\n\n    render()\n    {\n        const IS_EDITING = this.props.match.params.id !== \"new\";\n        return (<div className=\"container pt-4\">\n                    <form onSubmit={e => this.save(e)}>\n                        <h1>{IS_EDITING ? \"Edit dataset\" : \"New dataset\"}</h1>\n                        <div className=\"form-group\">\n                            <label for=\"nameInp\">Name</label>\n                            <input type=\"input\" defaultValue={this.state.name} className=\"form-control\" id=\"nameInp\" name=\"name\" placeholder=\"Dataset name\"/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label for=\"contentInp\">Data</label>\n                            <textarea type=\"input\" defaultValue={this.state.content} placeholder=\"Contents of data itself..\" className=\"form-control\" id=\"contentInp\" name=\"content\"/>\n                        </div>\n                        <button className=\"btn btn-primary mt-2\">Save</button>\n                    </form>\n            </div>);\n    }\n}\n\nexport default withRouter(EditDataPage);","import React, {useState} from \"react\";\nimport {HashRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nimport LoginPage from \"./components/LoginPage\";\nimport UserListPage from \"./components/UserListPage\";\nimport SolversPage from \"./components/SolversPage\";\nimport SignUpPage from \"./components/SignUpPage\";\nimport HistoryPage from \"./components/HistoryPage\";\nimport NewRunPage from \"./components/NewRunPage\";\nimport EditModelPage from \"./components/EditModelPage\";\nimport EditDataPage from \"./components/EditDataPage\";\n\nimport {API} from \"./helpers\";\n\nexport default function App()\n{\n  const [refreshToken, setRefreshTokenState] = useState(false);\n  const [userRank, setUserRank] = useState(1);\n\n  /**\n   * Sets the RefreshToken.\n   * @param string token the authToken\n   */\n  const setRefreshToken = (token) => {\n    API.refreshToken = token;\n    setRefreshTokenState(token);\n  };\n\n  return (<Router>\n        {\n          refreshToken ?\n            <>\n              {\n                userRank > 0 && <nav className=\"container-fluid navbar navbar-expand-lg navbar-light bg-light\">\n                  <Link className=\"navbar-brand\" to=\"/\">Minisinc</Link>\n\n                  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                  </button>\n                  <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                      <li className=\"nav-item active\">\n                        <Link className=\"nav-link\" to=\"/\">Jobs</Link>\n                      </li>\n                      <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/users\">Users</Link>\n                      </li>\n                      <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/solvers\">Solvers</Link>\n                      </li>\n                    </ul>\n                  </div>\n                </nav>\n              }\n\n              <Switch>\n              <Route path=\"/\" exact={true}>\n                <HistoryPage />\n              </Route>\n              <Route exact={true} path=\"/newRun\">\n                <NewRunPage/>\n              </Route>\n              {\n                userRank > 0 && <>\n                  <Route exact={true} path=\"/users\">\n                    <UserListPage/>\n                  </Route>\n                  <Route exact={true} path=\"/solvers\">\n                    <SolversPage/>\n                  </Route>\n                </>\n              }\n              <Route exact={true} path=\"/model/:id\">\n                <EditModelPage/>\n              </Route>\n              <Route exact={true} path=\"/data/:id\">\n                <EditDataPage/>\n              </Route>\n              <Route path=\"*\">\n                <HistoryPage />\n              </Route>\n            </Switch>\n            </>\n            : <Switch>\n              <Route path=\"/signup\">\n                <SignUpPage />\n              </Route>\n              <Route path=\"*\">\n                <LoginPage setRefreshToken={(t, rank = 0) => {\n                  setUserRank(rank);\n                  setRefreshToken(t);\n                }} />\n              </Route>\n            </Switch>\n      }\n      </Router>);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}